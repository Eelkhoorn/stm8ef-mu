loading (PCB timer p+ , check constant CT)

forth

-- key constants (A, B, D)
   65 constant KEY.SET
   66 constant KEY.PLUS
   68 constant KEY.MINUS

$818A constant CT		-- memory location of conversion table

$4000 constant EE.MIN
$4002 constant EE.SEC
$4004 constant EE.BDL  ( bounce delay )

variable ptr1

__meta

flash

VARIABLE m.level  -- pointer to menu level M0 .. M2
VARIABLE m.val    -- address of parameter value in level 2, EE.MIN or EE.SEC
VARIABLE m.ptr    -- current menu
VARIABLE m.disp   -- last display value
VARIABLE m.tim    -- backgrnd tick counter
VARIABLE sec      -- seconds counter
CVAR bdl?         -- past bounce delay
VARIABLE led#
VARIABLE PLS

: split
   1 for #10 /MOD next ;
: print3
   2 for $30 + E7S next ;
: . split print3 ;

-- display 3 chars at address
: .menu 2 for DUP I + C@ P7S next DROP ;

: .0  ( n -- )
   DUP #599 SWAP U< if		( more then 10 minutes, display just minutes)
     0 #60 UM/MOD NIP .
   else 
     .
   then
;

: M. ( n -- )
  -- lazy .0: print number only if value has changed
   DUP m.disp @ = NOT if
     DUP m.disp ! DUP .0
   else DROP then
;

: conv ( a -- n )		-- convert hex display value at address a to digit n
   DEPTH >R
   C@ #10 0 do
     DUP I CT + C@ = if
       I LEAVE
     then
   loop ( # i | # )
   DEPTH R> - 0= if
     0
   then NIP
;

: 10^ ( n1 n2 -- n3)  -- n3 = n1 * 10^n2 | n3 = n1 if n2 < 0
   DUP DUP
   0< 0= if
     0= if
       DROP 1 *
     else
       0 do #10 * loop
     then 
   else
     2DROP
   then
;

: h2	-- helper word for incd and decrd
   led# @ 10^ m.val @ DUP @ ROT +
   0 MAX #999 MIN  SWAP ULOCK ! LOCK
;

: h1	-- helper word for incd and decrd
   LED7LAST led# @ - conv
;
: swd  ( -- )	-- switch digit
   DROP
   led# DUP @ DUP 2 < if
     1 + SWAP !
   else
     0 led# !
     0 m.tim !
     $FFFF m.disp !
     [ here ptr1 \f ! ] $AAAA ( dummy) m.level !	-- back to M0
   then 
;
: incd    1 h2 ;	-- increment digit

: decrd  -1 h2 ;	-- decrement digit

-- Implementation hints:
-- * menu items are Forth words
-- * a section of the dictionary is used as a linked list
-- * the name of a word is used as the menu item string


$3730 , $55 c,  ( this is for displaying "MIN")
here constant M.END
: min.  EE.MIN m.val ! ;	-- "_" better resembles "n" on 7SEG display
$3979 , $6d c,  ( this is for displaying "SEC)
here constant M.START
: sec. EE.SEC m.val ! ;


-- ( compile time stack: M.end )
: M.next ( -- na )
  -- rotate to next menu item
  m.ptr DUP @ 
  M.START = if
    M.END else M.START
  then
  SWAP !
;

: keyExe ( xtset xt+ xt- -- )
  -- pressed key selects and executes an xt
  ?KEY  if >R
     R@ KEY.SET = if
        2DROP  EXECUTE  -- xtset
     else
        R@ KEY.PLUS = if
          DROP NIP EXECUTE  -- xt+
        else
          R@ KEY.MINUS = if
            NIP  NIP EXECUTE  -- xt-
          else
            DROP 2DROP       -- do nothing
          then
        then
      then R> DROP
    then 
;

: M.exec
  -- execute m.ptr "method"
  m.ptr @  EXECUTE
;
  
: M2 ( -- )
   -- edit parameter value
   M.exec
   m.val @ @ ( DUP ) .
   ['] swd  ['] incd  ['] decrd  keyExe
;

: M1.select
-- Go to next menu level
    ['] M2  m.level !
;

: M1 ( -- )
-- select parameter
   ['] M1.select  ['] M.next  ['] M.next  keyExe
   m.ptr @  3 - .menu
;

-- add dot at display unit n (n = 0, 1 or 2)
: .+ ( n -- ) LED7FIRST + DUP C@ #128 + SWAP C! ;

-- Set time
: set
	EE.MIN @ #60 * EE.SEC @ + 
	PLS !
;

here constant ---

$40 c, $40 c, $40 c, ( to display "---")

: M0 ( -- )
-- main menu - normally print PLS
-- enter menu on key "set"
   m.tim @ #50 < if
     --- .menu 1  m.tim +!		-- indicate we are back in M0
     set
   else
     ?KEY if
       -- key actions
       KEY.SET = if
         ['] M1 m.level !
       then
     then
     bdl? C@ if
       sec @
     else
       PLS @
     then
     M.
   then
;

: menu ( -- )
   m.level @ EXECUTE
;


' M0  ptr1 \f @ 1 + image-! 		-- replace dummy address ($AAAA)

ld tmp/pdi
