( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2022 David Frech. (Read the LICENSE for details.)


loading STM8 Meta-compiler (main)

( Make it easy to check if a device register has been defined. If device
  equates move to somewhere other than .equates. update this too.)
compiler
: .reg   .equates. \ .contains ;
forth
: .reg   \ .reg ;

-- ------------------------------------------------------------------------
-- Peephole optimiser tags
-- ------------------------------------------------------------------------

( Tags tell the meta-compiler what kind of special code, if any, was just
  compiled. Currently used to identify literals and calls, for simple
  peephole optimisations.

  We store the tag byte at \m here. No tag is represented by an "empty"
  image byte - 0ff - _not_ by a tag of zero.)

( Tags used:)
  1 constant $lit    ( $ suggests price tag ;-)
"ad constant $bsr
"bd constant $jsr1   ( jsr dir)
"cd constant $jsr2   ( jsr ext)

: tag!  ( tag)     \m here image-c! ;
: tag@  ( - tag)   \m here image-c@ ;
: notag  "ff tag! ;

( We also want to cleanly uncompile code, so instead of simply backing up
  and leaving the cruft - instructions and tags - behind, let's back up and
  "uncompile" the code, leaving behind untagged code.)

: uncompile  ( #bytes)
   \m here  over -  dup \m goto image+  swap ( #bytes)  1+ ( include tag)  "ff fill ;
meta
:  ]   __target-colon  notag ;

( These are pointers to target kernel words.)
variable (0branch)
variable (+loop)
variable (>R)
variable (R>)
variable (donxt)
variable (SWAP)
variable (DUP)
variable (DROP)
variable (+LOOP)
variable ((+loop))
variable (1)
variable (dovar)
variable (docon)
variable (dovarptr)
variable (thisvar)

: literal  "83 \m c, \m , ;
: compile,  ( target-cfa)  \m here swap  \a c ( compile call)  image-c@ tag! ;
forth

: called  ( - dest-addr)
   \m here  tag@
   dup $bsr  = if ( bsr)      drop  dup 1- image-c@ ( offset)  sext  +a ^ then
   dup $jsr1 = if ( jsr dir)  drop      1- image-c@ ^  then
   dup $jsr2 = if ( jsr ext)  drop     2 - image-@  ^  then
   2drop  0 ;

: replace  ( jsr-op jmp-op offset - -1)
   \m here +a image-c!  drop  notag  -1 ;

( If last code compiled was a call, rewrite it to a jump and return true;
  else return false.)

: tail?  ( - f)
   tag@
   dup $bsr  = if ( bsr)      "20 ( bra)      -2 replace ^  then
   dup $jsr1 = if ( jsr dir)  "bc ( jmp dir)  -2 replace ^  then
   dup $jsr2 = \m here 2 - image-@ \m (R>) @ = not and if ( jsr ext)  "cc ( jmp ext)  -3 replace ^  then
   drop  0 ;

target-compiler
: ^   tail? if ^ then  "81 \m c, ( asm{  ret }) ;

forth
: lit?   ( - lit?)  tag@ $lit =  dup if  4 uncompile  then ;

: [r]   ( mark as "runtime"; move last .target. word into .target-runtime.)
   .target. addr@  dup addr@  ( last prev)  .target. addr!  ( unlink)
   .target-runtime. addr@  ( last last-runtime)  over .target-runtime. addr!
   swap addr! ( link our new word to last-runtime) ;

: [var]    ( move last .meta. word into .variables.)
   .meta. addr@ dup  addr@ .meta. addr! 
   .variables. addr@ over .variables. addr!
   swap addr!
;

( Look up a label or forward-reference variable, and execute it to push
  its value or address.)

: lookup
   .meta. chain' execute ;

: implements   \m here  lookup  ! ;

( Compile a cfa into a target colon word.)

variable last-code   ( for ;code and does> to fix up)

( Fetch value of variable - a primitive - and complain if not yet defined.)
: (p@)  ( var)  @  =if  ^  then  error" primitive not yet defined" ;

( Fetch primitive and compile into target.)
: (p,)  ( var)  (p@)  \m compile, ;

compiler
: p,   .meta. \chain  compile (p,) ;
: p@   .meta. \chain  compile (p@) ;

meta
: label    \m here  current preserve    meta constant   __asm ;
: name    \m here  current preserve  target constant ;
: :       \m name  __target-colon ;

:  ]   __target-colon  notag ;
-- : #]   \m literal  \m ] ;

: '  .target. chain' execute ;  ( target words are constants!)

: __host  \ [ ;  ( return to host forth mode)
: {    \m __host ;  ( useful for bracketing a few  host forth words)

forth
: }    __meta ;  ( return to meta)

assembler
: ;c   __meta ;

target-compiler
: [   __meta ;
: ;   \tc ^  \tc [ ;  ( return to meta)

definer
: ;   \ ;  __meta ;  ( do normal host ; but then return to __meta)

meta

: fill   ( a u c) dp preserve rot \m goto swap for dup \m c, next drop ;
: fillw  ( a u w) dp preserve rot \m goto swap for dup \m  , next drop ;

-- ------------------------------------------------------------------------
-- Control structures.
-- ------------------------------------------------------------------------

( Resolve a forward or backward jump, from src to dest.)
( When using absolute branch addresses, this is easy: just store dest at src.)

: <resolve  ( dest src)  image-! notag ;
: >resolve  ( src dest)  swap  \m <resolve ;
: mark      ( - src)     \m here  "dead \m , ;

target-compiler
: if    ( - src)   ( $cd \m c,)     p,  (0branch)  \m mark ;
: then  ( src)          \m here \m >resolve  ;
: else  ( src0 - src1)  ( p,   branch) $cc \m c,  \m mark  swap  \tc then ;
: begin   ( - dest)  \m here ;
: until   ( dest -)  \tc  if  \m <resolve ;
: again   ( dest -)  ( p, branch) $cc \m c,  \m mark  \m <resolve ;
: while   ( dest - src dest)  \tc  if  swap ;
: repeat  ( src dest -)   \tc again  \tc then ;
: for      ( - src dest) p, (>R) \tc begin ;
: next    ( dest -)      p, (donxt)  \m mark  \m <resolve  ( \tc then) ;

( do, loop, +loop)
: do      ( - dest)   $83 \m c, \m mark
                      p, (>R) p, (SWAP)  p, (>R)  p, (>R) \tc begin  ;
: +loop   ( dest)     p, ((+loop))  \tc begin  rot \m <resolve \m mark \m <resolve  ;
: loop    ( dest)     p, (1) \tc +loop ;

-- push literal on the stack
: literal \m literal ;

-- compile a literal
: [']        \m '  \m literal ;
: , \m , ;

-- ------------------------------------------------------------------------
-- Special versions of host colon compiler
-- ------------------------------------------------------------------------

( Define useful colon compilers:
      meta:  for defining new target defining words!
   definer:  for defining meta-compiler-specific compiling words

  We will define another colon compiler - the actual target colon - in the
  kernel, using our meta-defining words!)

( We need meta: so we can define defining words in the middle of target
  code - eg, the kernel. It gives us an easy way to fire up a specific
  colon compiler - the one specifically *tuned* for making target defining
  words.

  definer: is similar. It runs the same colon compiler as meta: but puts
  the new word on the .definer. chain. Its use is rather obscure, and hard to
  explain. ;-)

meta
: meta:      current preserve  meta             :  __definer-colon ;
: compiler:  current preserve  target-compiler  :  __definer-colon ;
: definer:   current preserve  definer          :  __definer-colon ;
forth

( Patch target colon compiler.)
.meta. chain' literal   is target-literal
             ' number   is target-number    ( use host's number)
.meta. chain' compile,  is target-compile,

-- Create/does>
-- syntax:
-- create parent: n ( number of cells to be compiled in child word) t-create parent-name [target words] t-does ;
-- create child:  n0 n1 ... n parent-name child-name
-- i.e.: forth 2 t-create plus DUP @ SWAP 2+ + t-does 
--             33 44 plus QQ
--       chat QQ -> 77

target-compiler
: ;h \tc ; \m __host  ]  ;
: t-does
  \tc ;h does> \m name  dup cell+ @ "cd \m c, \m , @ for \m , next ;

forth
: t-create ( n)
   create ( n) , \m here , p, (thisvar) \m ] ;

meta
: 2constant create , , does> 2@ swap  \m literal ;
: create meta create  ;
forth
