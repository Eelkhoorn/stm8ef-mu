( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2022 David Frech. (Read the LICENSE for details.)

loading STM8 serial chat protocol (host)

hex

( Taking inspiration from the wildly successful S08 serial chat protocol.

  Responds to the following commands. NOTE: these are hex values!

00 - 0f  idle   - these command bytes are ignored

10  version     - get the 32-bit version commit
11  set addr    - set the memory address pointer
12  read-bytes  - read N words, incrementing by 2 as we go
13  write-byte  - write a word to memory, incr pointer by 2
14  get-sp      - get sp
15  set-sp      - used in stack> to prevent overwriting the stack
16  run         - set sp and pc and execute
17  flash       - set target address and count, wait for response


19 - ff  idle   - these command bytes are ignored
)

( To make spying on the protocol easier to deal with, break up the printed
  bytes into "packets" in a semantically meaningful way. How about this
  stupid name, which is easy to remember:)

: ?spkt  ( spy packet, or "spiked")  spy @ if  cr  then ;

: c.idle                      ?spkt   0 >w  ;

( Send two no-ops, let them transmit, _then_ throw away any input bytes.)
: c.resync   c.idle  drain  flush ;

: c.set-addr      ( a)          ?spkt  11 >b  >w             ;
: c.read-bytes    ( n)          ?spkt  12 >b  >w             ;  ( then read streamed bytes)
: c.write-byte    ( n)          ?spkt  13 >b  >b             ;
: c.get-sp        ( - sp)       ?spkt  14 >b  w>             ;
: c.set-sp        ( sp - sp)    ?spkt  15 >b  >w             ;
: c.run           ( sp pc)      ?spkt  16 >b  swap >w >w     ;
: c.flash         ( a u -- ab)  ?spkt  17 >b  swap >w >w  b> ;
: c.return                      ?spkt  18 >b                 ;

: c.hello  ( - chunk-size)
   baud-rate bps  c.resync
   /page ;

: c.setup-chunk  ( buf a u - #bytes)
   swap c.set-addr  swap m !  ( #bytes) ;

: c.read    ( buf a u)
   c.setup-chunk  dup c.read-bytes  for  b> m&  next ;

: c.write ( buf a u)
    c.setup-chunk  dup c.write-byte for  m* >b next  ;

: c.flash-begin  \t ULOCKF  remote  ;
: c.flash-end    \t LOCKF   remote  ;
: c.eeprom-begin \t ULOCK   remote  ;
: c.eeprom-end   \t  LOCK   remote  ;
: c.erase    ( a)  ( \t WIPE remote) ;
: c.program  ( buf a u) 
   push ( u)
   swap @flashbuf r@ ( a buf flashbuf u)  c.write  ( copy chunk to target ram)
   pop  ( a u) c.flash  drop ;

meta

: ." ( a --) 
   spy preserve spy off
   dup \m c@ >r pad swap 1 + r@ t.read pad r> type ;


: string,  ( a u)
   \m here image+ swap  ( a image u)  dup \m allot  cmove ;

: $" ( -- a)
   \m here \f "  dup \m c, \m string,
;

forth
( Print stm8ef release as compiled in target)
: HI      ( - | ."stm8ef-release)
                         cr   ?spkt  "10 >b   w>  cr \m ." cr ;

forth
-- stop background task on target
: bgs    baud-rate bps pad 2 0 fill pad \m BGADDR 2 c.write ;

: chat   ( this defines the t._____ words from common/interact.mu4)
   chat-via  c.hello  c.get-sp  c.run  c.set-sp ( c.dpush) c.read  c.write
   c.flash-begin  c.flash-end  c.eeprom-begin c.eeprom-end 
   c.erase  c.return   c.program   c.idle  c.resync
;
