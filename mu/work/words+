loading MINDEV constants, variable, implement foreward refs,  


flash  dp constant f-image
ram    dp constant r-image

: flash?
    h @ f-image = ;
meta
: allotr  ( allot ram while in flash)
   flash? if ram \m allot flash else allot then ;

: +! ( u a) dup \m @ rot \f + swap \m ! ;

forth
: comp? state @ @ comp = ;

: VARIABLE
   create
      \m here ,
   flash? if
      ram \m here dup , 0 \m , flash p, (dovarptr) \m ,
   else
      p, (dovar) \m here , 0 \m c,         ( store 0)
   then [tc]
   does>
      2@ comp? if nip "cd \m c, \m , else drop  then
;

-- byte variable
: CVAR
   create
      \m here ,
   flash? if
      ram \m here dup , 0 \m c, flash p, (dovarptr) \m ,
   else
      p, (dovar) \m here , 0 \m ,         ( store 0)
   then [tc]
   does>
      2@ comp? if nip "cd \m c, \m , else drop  then
;

target-compiler

: \ .target-compiler. token' if , ^ then .target-runtime. find huh? literal ['] , , ;
: \m .meta. \chain ;

__meta
hex

'tr ?branch (0branch)      \f !
'tr >R (>R)                \f !
'tr R> (R>)                \f !
'tr SWAP (SWAP)            \f !
'tr (+loop) ((+loop))      \f !
'tr 1 (1)                  \f !
'tr donxt (donxt)          \f !
'tr doVar (dovar)          \f !
'tr docon (docon)          \f !
'tr doVarPtr (dovarptr)    \f !
'tr DROP (DROP)            \f !
' thisvar (thisvar)      \f !

meta


