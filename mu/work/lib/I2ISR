.ifndef (I2ISR)

: (I@ISR) ;

loading I2C ISR

comment ===
STM8 eForth: I2C Master ISR for the STM8 I2C peripheral        TG9541 - 201205
------------------------------------------------------------------------------
This is a variant of Thomas' I2C ISR, with an extra three bytes in the I2ISR array
for a command pointer and counter. (366 bytes)

The I2ISR I2C ISR code acts as a driver for I2C write/read transfers

Register definitions in this file are the same for STM8S and STM8L:
load the I2ISR code after e.g. "--res MCU: STM8L051" in the application code
see Example at the end of this file

API:
  * I2ISR array, acts as an ISR "register file"
    - byte 0: ER < 0 indicates error (bits 6:0 copied from I2C_SR2)
    - byte 1: SA slave address (0..127)
    - byte 2: CCOUNT number of command bytes
    - byte 3: TCOUNT number of bytes in write phase
    - byte 4: RCOUNT number of bytes in read phase
    - byte 5,6 : CPOINT command buffer pointer
    - addr 7,8 : TPOINT transmit buffer pointer
    - addr 9,10: RPOINT receive buffer pointer
  * I2S ( c -- ) start I2C sequence defined by I2ISR registers

Usage notes:
  * use I2S to set 7bit slave address and reset error
  * use ?I2D to check for error (indicated by I2ISR MSB)
  * use ?I2E to check for error (indicated by I2ISR MSB)
  * CPOINT points to a buffer or variable that contains the
    I2C slave "command" (e.g. DS1621 temperture sensor) or "memory
    address" (e.g. 24C64 EEPROM). 
    TPOINT points to the data to be written
  * RPOINT contains the read target buffer or variable address
    while CPOINT points to I2C slave "command" or "address" data
===

ld work/lib/]B!
ld work/lib/]C!
ld work/lib/]B?

--  Load Forth IF .. ELSE .. THEN with relative addressing
ld work/lib/JREQ

__meta
flash

VARIABLE I2ISR  9 allotr    --  the register file

--  ready?, CCOUNT, TCOUNT and RCOUNT ans BUSY back to zero?
--    or error lagged.
: ry?  ( -- )
	[M 
	   $C6 c, I2ISR ,		--  LD A, error byte
	   $A480 ,				--  ADD A, $80
	   $26 c, >REL			--  JRNE IF, exit if error
	   $C6 c, I2C_SR3 ,		--  LD A, I2C_SR3
	   $A402 ,				--  AND A, #2, BUSY
	   $CA c, I2ISR 2 + ,	--  LD A, CCOUNT
	   $CA c, I2ISR 3 + ,	--  OR A, TCOUNT
	   $CA c, I2ISR 4 + ,	--  0R A, RCOUNT
	   $26 c,				--  JRNE M
	   swap					--  swap branch pointers
	]<M
	THEN
;

--  start the sequence by enabling interrupts and setting I2C_CR2 bit0 (START)
: I2S ( c -- )      --  start i2C write/read - user code sets T/RCOUNT, T/RPOINT
  ( c ) I2ISR !     --  reset flag (MSB), set device address (LSB)
  [ 0 I2C_CR2 1 ]B! --  clear stop bit
  [ 3 I2C_ITR ]C!   --  set ITERREN and ITEVTEN
  [ 1 I2C_CR2 0 ]B!
  ry?				--  wait for communication to finish
;

--  I2C Master ISR headerless code
: I2C_int
  SAVEC

  --  EV5 START has just been issued - trigger sending ADDR and R/W
  [ I2C_SR1 0 ( SB ) ]B@IF [
    $C6 c, I2C_DR ,          --  LD   A,I2C_DR  ; reset SB
    $C6 c, I2ISR 1 + ,        --  LD   A,SA      ; slave address
    $48 c,                   --  SLL  A         ; shift left for R/W flag
    $97 c,                   --  LD XL, A
    $C6 c, I2ISR 2 + ,        --  LD A, CCOUNT
    $CA c, I2ISR 3 + ,       --  TCOUNT OR
    $26 c, >REL              --  JRNE, CCOUNT C@ TCOUNT C@ OR 0= IF
      $725D , I2ISR 4 + ,   --  TNZ  RCOUNT
       JREQ                  --  RCOUNT C@ IF
       $5C c,   ]            --  INC X        ; set R flag
      THEN
    THEN
    [ $9FC7 , I2C_DR , ]      --  LD A,XL  LD I2C_DR,A  ; send device address
  THEN

  --  EV6 ADDR has just been sent - trigger next steps or STOP
  [ I2C_SR1 1 ( ADDR ) ]B@IF [  --  EV6
    $C6 c, I2C_SR1 ,         --  CLR ADDR by reading SR1
    $C6 c, I2C_SR3 , ]       --  followed by SR3
    [ I2C_SR3 2 ]B@IF [      --  if transmitting
      $C6 c, I2ISR 2 + ,     --  LD   A,CCOUNT
      $CA c, I2ISR 3 + ,     --  TCOUNT OR
      $26 c, >REL ] ( IF )   --  JRNE rel
        [ 1 I2C_CR2 1 ]B!    --  dummy access (e.g. scan)
      THEN
    ELSE  [
      $C6 c, I2ISR 4 + ,     --  LD   A,RCOUNT
      $4A c,                 --  DEC  A
      --  EV6_1 1-byte reception
      $26 c, >REL ] ( IF )   --  JRNE rel
        [ 0 I2C_CR2 2 ]B!    --  ACK disable
        [ 1 I2C_CR2 1 ]B!    --  end read sequence
      THEN
    THEN
    [ 1 I2C_ITR 2 ]B!  --  enable buffer interrupt
  THEN

  --  EV7 reveive bytes
  [ I2C_SR1 6 ( RXNE ) ]B@IF [
    $C6 c, I2C_DR ,          --  LD   A,I2C_DR
    $88 c,                   --  PUSH A
    --  EV7_1 reveive 2nd to last byte, prepare stop
    I2ISR 4 + ]C@IF          --  like "?DUP IF" with TOS in A
      [ 3 ]A<IF              --  2nd to last byte in DR, last in ShReg: set STOP
        [ 0 I2C_CR2 2  ]B!   --  ACK disable
        [ 1 I2C_CR2 1 ]B!    --  end read sequence
      THEN [
      $725A , I2ISR 4 + ,    --  DEC  RCOUNT
      $51 c,                 --  EXGW X,Y
      $CE c, I2ISR 9 + ,     --  LDW  X,RPOINT
      $84 c,                 --  POP  A
      $F7 c,                 --  LD   (X),A
      $5C c,                 --  INCW X
      $CF c, I2ISR 9 + ,     --  LDW  RPOINT,X
      $51 c, ]               --  EXGW X,Y
    ELSE [ --  discard bytes if receive counter is 0
      $84 c, ]               --  POP  A
    THEN
  THEN

  --  EV8_1 and EV8 transmit 1st and following bytes
  [ I2C_SR1 7 ( TXE ) ]B@IF
    [ I2ISR 2 + ]C@IF [     --  CCOUNT C@
      $51 c,               --  EXGW X,Y
      $CE c, I2ISR 5 + ,   --  LD X, CPOINT
      $F6 c,               --  LD A,(X)
      $C7 c, I2C_DR ,      --  LD I2C_DR,A
      $5C c,               --  INCW X
      $CF c, I2ISR 5 + ,   --  LDW CPOINT,X
      $51 c,               --  EXGW X,Y
      $725A , I2ISR 2 + ,  --  DEC CCOUNT
      ]
   ELSE
    [ I2ISR 3 + ]C@IF [    --  TCOUNT C@
      $51 c,               --  EXGW X,Y
      $CE c, I2ISR 7 + ,   --  LDW X,TPOINT
      $F6 c,               --  LD A,(X)
      $C7 c, I2C_DR ,      --  LD I2C_DR,A
      $5C c,               --  INCW X
      $CF c, I2ISR 7 + ,   --  LDW TPOINT,X
      $51 c,               --  EXGW X,Y
      $725A , I2ISR 3 + ,  --  DEC TCOUNT
      ]
    ELSE --  disable buffer interrupt after the last byte
      [ 0 I2C_ITR 2 ]B!
    THEN
  THEN
  THEN
  --  EV8_2 end transmission or re-START reception through EV5
  [ I2C_SR1 2 ( BTF ) ]B@IF
    [ I2ISR 4 + ]C@IF      --  RCOUNT C@
      [ 1 I2C_CR2 2 ]B!    --  ACK enable
      [ 1 I2C_CR2 0 ]B!    --  re-START for read sequence
    ELSE
      [ 1 I2C_CR2 1 ]B!    --  STOP clears TXE
    THEN
  THEN

  --  check error events - flag error and abort transmission
  [ I2C_SR2 ]C@IF [
      $4F c,                 --  CLR  A
      $C7 c, I2C_ITR ,       --  LD   I2C_ITR,A ; disable all interrupts
      $31 c, I2C_SR2 ,       --  EXG  A,I2C_SR2
      $AA80 ,                --  OR   A,#$80
      $C7 c, I2ISR , ]       --  LD   I2ISR,A   ; flag error
      [ 1 I2C_CR2 1 ]B!      --  release the bus
  THEN

  IRET
; -- INT_I2C !flash


: I2I ( -- ) --  initialize peripheral - init values by @eelkhoorn

  [ 0 I2C_CR1 0 ]B!     --  I2C peripheral disable
  [ 0 I2C_CR2 ]C!
  [ 1 I2C_FREQR 4 ]B!   --  CPU freq 16 MHz
  [ $A0 I2C_OARL ]C!    --  own address 0xA0
  [ $40 I2C_OARH ]C!    --  7 bit address mode
--    410kHz fast mode
   [ $80 I2C_CCRH ]C!    --  I2C fast mode 
   [ $D  I2C_CCRL ]C!    --  I2C freq 410kHz (table 91)
--    100kHz normal mode
--   [ 0 I2C_CCRH 6 ]B!    -- duty cycle
--   [ $50 I2C_CCRL ]C!    -- i2c freq 100 kHz, CCR = f.master/(2 f.i2c)
  [ $11 I2C_TRISER ]C!  --  TRISER = CPU freq in MHz + 1
  [ 1 I2C_CR1 0 ]B!     --  Peripheral enable
;

VARIABLE CREG 2 allotr 	--  command register, 4 bytes

--  send n (1..4) bytes to slave a
: snd ( bn .. b1 b0 n a -- )	--  b0 =0 for commands, b0=$40 for data
	>R DUP [ I2ISR 2 + ] literal C!
	0 do CREG I + C! loop
	CREG [ I2ISR 5 + ] literal !
	R> I2S
;

.then
