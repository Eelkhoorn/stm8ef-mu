-- Driver for SH1106 oled displays 128x64 over i2c
-- (630 bytes excl font)

-- ssdi ( --) initialise i2c and ssd1306-display
-- cls ( --) clear screen
-- dtxt ( adr --)	display text compiled with $"
-- Text has to be compiled before it can be displayed.
-- $" text to be displayed" constant txt
-- txt tt# will display "text to be displayed" on the oled screen.
-- n#	( n --) display number
-- 1234 d#	will display "1234".

-- The display has 8 pages (lines) of 128x8 dots. Positioning is done by sending display commands:
-- snd (b b .. b0 n --)	send multiple (n) display commands, last byte b0 = 0 for positioning
-- 																	  b0 = $40 for dots to display 

-- Display positioning commands:
-- $B0 - $B7	Vertical position: Line 0 - line7
-- 0-$F	Horizontal position in steps of 1 dot
-- $10 -$17	Horizontal position in steps of 16 dots
-- $B2 $13 $5 0 4 $3c snd
-- will position to third line ($B2), dot 53 ($13 = 3 x 16, $5 = 5, together 53).
-- snd needs the number of display commands to be send, and the slave address.
-- 53 2 pc will do the same. 

-- API:
--   * I2ISR array, acts as an ISR "register file"
--     - byte 0: ER < 0 indicates error (bits 6:0 copied from I2C_SR2)
--     - byte 1: SA slave address (0..127)
--     - byte 2: CCOUNT number of command bytes
--     - byte 3: TCOUNT number of bytes in write phase
--     - byte 4: RCOUNT number of bytes in read phase
--     - byte 5,6 : CPOINT command buffer pointer
--     - addr 7,8 : TPOINT transmit buffer pointer
--     - addr 9,10: Receive buffer pointer

ld werk/lib/FONT
ld werk/lib/I2ISR	-- i2c interrupt service routine

$3c constant SSD  -- slave address

-- Temp. constants for I2ISR register access for user code
I2ISR 2 + constant CCOUNT  -- char number of command bytes
I2ISR 3 + constant TCOUNT  -- char number of bytes TX
I2ISR 4 + constant RCOUNT  -- char number of bytes RX
I2ISR 5 + constant CPOINT  -- points to command buffer 
I2ISR 7 + constant TPOINT  -- points to TX buffer, starting with CMD/ADDR
I2ISR 9 + constant RPOINT  -- points to RX buffr

flash
__meta

VARIABLE LBF 4 allotr	-- letter buffer, 6 bytes
VARIABLE COLROW
VARIABLE #count
VARIABLE radixx

: SSD_snd SSD snd ;

-- position cursor
: PC  ( column row -- )
	$B0 + SWAP
--	 6 * 2+
	$10 /MOD
	$10 +
	0 4 SSD_snd
;

: crh1 COLROW @ ;
: crh2 $FF AND  ;

: ROW ( --c)
   crh1 crh2 ;
: COL ( -- c)
   crh1 EXG crh2 ;
   
: CP! ( column row -- ) SWAP $100 * + COLROW ! ;

: PC! 2DUP CP! PC ;

: #ROW
   COL #21 = if
      0 ROW 1+ 
      DUP 8 = if DROP 0  then PC!
   then
;

: COL+ $100 COLROW +! #ROW ;


-- send n bytes @ a to display buffer
: sb ( a n -- )
	TCOUNT C!
	TPOINT !
	$40 1 SSD_snd
; 

-- send display command
: dcmd ( c -- )
	0 2 SSD_snd
;

-- Translates ASCII to address of bitpatterns:
: a>bp  ( c -- c-adr ) 
	#32 MAX #127 MIN  #32 - 5 * FONT +
;

-- Translate digit to address of bitpatterns:
: d>bp ( n -- a)
   dup #10 < NOT if
      7 +
   then
   #16 + 5 * FONT +
;

: disp ( a -- )
   LBF 5 CMOVE LBF 6 sb
;

-- Display character:
: drc  ( c --)
   a>bp disp COL+
;

-- display digit
: d# ( n -- )
	d>bp disp COL+
;

: n#h ( n -- di ... d0)
   0 #count !
   radixx @ >R 
   R@ #10 = if DUP 0< if #45 drc NEGATE then then
   begin 1 #count +! R@ /MOD $FFF AND DUP 0= until R> 2DROP
;

: ##### 4 for #35 drc next ;

: n#
   DUP $8000 = radixx @ #10 = AND if 
   DROP #####  ; ] then
   n#h
   #count @ 0 do DUP #10 < if d# else $37 + drc then loop
;

-- spaces
: spc  ( u --)
	for FONT 6 sb  COL+ next 
;

-- counted string
: str ( a -- a+1 c)
   1+ DUP 1- C@
;

-- display n characters @ a, n<22
: t# ( a n -- )
	0 do DUP C@ drc  1+ loop DROP
;

-- clear screen
: cls
	0 0 7 for 2DUP PC $5500 #128 sb 1+ next DROP 0 PC!  
;

-- Initialise display
: SSDI  ( --)
   I2I
   0 1 SSD_snd
   #10 radixx !
   cls
   $af dcmd
;
__host
meta
: hex hex $10 \var radixx \t ! remote ;
: decimal decimal #10 \var radixx \t ! remote ;
forth

ram
