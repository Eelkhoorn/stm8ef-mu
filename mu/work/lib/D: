.ifndef (D/)

: (D/) ;
--  unsigned divide of two double numbers

flash

ld werk/lib/D@
ld werk/lib/D!
ld werk/lib/D-
ld werk/lib/D+
ld werk/lib/D<
ld werk/lib/D*
ld werk/lib/BF@
ld werk/lib/BF!

__meta
flash

VARIABLE $DEN$ 2 allotr
VARIABLE $Q$ 2 allotr
VARIABLE $N$ 2 allotr
VARIABLE $R$ 2 allotr


--  bitlength -1 of double @ a
: bl ( a -- u )
	#32 begin
		1- 2DUP BF@
	until NIP
;

--  left shift arithmitical on double
: 2*! ( a -- )
	DUP D@ 2 D* ROT D!
;

--  helper for D/
: hd/ $R$ D@ $DEN$ D@ ;

--  unsigned divide on doubles,
--   return doubles for remainder and quotient
: D/ ( d1 d2  -- r q )
	
	0 DUP 2DUP $Q$ D! $R$ D!
	$DEN$ D! 
	2DUP 0= SWAP 0= AND if
		2DUP
	else
		$N$ D!
		0 $N$ bl do $R$ 2*!
			$N$ I BF@ $R$ 0 BF!
			hd/ D< NOT if
				hd/ D- $R$ D!
				1 $Q$ I BF!
			then
		-1 +loop
		$R$ D@ $Q$ D@
	then
;

.then

comment ===

--  https://en.wikipedia.org/wiki/Division_algorithm

if D = 0 then error(DivisionByZeroException) end
Q := 0                  -- Initialize quotient and remainder to zero
R := 0                     
for i := n − 1 .. 0 do  -- Where n is number of bits in N
  R := R << 1           -- Left-shift R by 1 bit
  R(0) := N(i)          -- Set the least-significant bit of R equal to bit i of the numerator
  if R ≥ D then
    R := R − D
    Q(i) := 1
  end
end
===
