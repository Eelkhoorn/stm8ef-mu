32-bit Thumb2 instruction encodings

This list is very far from complete. I added a bunch of instructions to the
32-bit disassembler without adding anything here.

But the ldr/str variants are so varied and complex that I want to write them
down here so I can better figure out the encodings.


Load/store multiple

W = writeback
L = load

1110 1000 1 0WL nnnn   rrrr rrrr rrrr rrrr      stmia.w  (also ldmia)
1110 1000 1 011 1101   rrrr rrrr rrrr rrrr      pop.w
1110 1001 0 0WL nnnn   rrrr rrrr rrrr rrrr      stmdb.w  (also ldmdb)
1110 1001 0 010 1101   rrrr rrrr rrrr rrrr      push.w


Table branch

1110 1000 1 101 nnnn   1111 0000 000H mmmm      tbb/tbh


Load/store dual/exclusive
        P U  WL
1110 1000 0 101 nnnn   tttt 1111 iiii iiii      ldrex i8 (word offset; added)
1110 1000 1 101 nnnn   tttt 1111 0100 1111      ldrexb (zero offset)
1110 1000 1 101 nnnn   tttt 1111 0101 1111      ldrexh (zero offset)

1110 1000 0 100 nnnn   tttt dddd iiii iiii      strex i8
1110 1000 1 100 nnnn   tttt 1111 0100 dddd      strexb (zero offset)
1110 1000 1 100 nnnn   tttt 1111 0101 dddd      strexh (zero offset)

P = index
U = up (add)
W = writeback
L = load

For these encodings PW != 00; otherwise instr encodes ldrex/strex/tbb/tbh

1110 100P U 1WL nnnn   tttt vvvv iiii iiii      strd/ldrd i8 (word offset)
1110 1001 U 101 1111   tttt vvvv iiii iiii      ldrd literal (pc-rel; word offset)


For both data processing types:

aaaa = alu operation
  0 and/tst   1 bic       2 or    3 orn
  4 eor/teq   5 ???       6 ???   7 ???
  8 add/cmn   9 ???       a adc   b sbc
  c ???       d sub/cmp   e rsb   f ???

s = set cond bits


Data processing (shifted register)

tt = shift type
  00 lsl  01 lsr  10 asr  11 ror/rrx
i3:i2 = shift amount
  lsl 0 = mov
  lsr 0 = lsr 32
  asr 0 = asr 32
  ror 0 = rrx 1

1110 101 aaaa s nnnn   0iii dddd iitt mmmm

1110 101 0000 1 nnnn   0iii 1111 iitt mmmm    tst.w Rn, Rm, shift  (alu=and, Rd=pc)
1110 101 0100 1 nnnn   0iii 1111 iitt mmmm    teq.w Rn, Rm, shift  (alu=eor, Rd=pc)
1110 101 1000 1 nnnn   0iii 1111 iitt mmmm    cmn.w Rn, Rm, shift  (alu=add, Rd=pc)
1110 101 1101 1 nnnn   0iii 1111 iitt mmmm    cmp.w Rn, Rm, shift  (alu=sub, Rd=pc)

1110 101 0010 s 1111   0000 dddd 0000 mmmm    mov(s).w Rd, Rm  (lsl #0, alu=orr, Rn=pc)

1110 101 0010 s 1111   0iii dddd ii00 mmmm    lsl(s).w Rd, Rm, #imm5  (alu=orr, Rn=pc)
1110 101 0010 s 1111   0iii dddd ii01 mmmm    lsr(s).w Rd, Rm, #imm5  (alu=orr, Rn=pc)
1110 101 0010 s 1111   0iii dddd ii10 mmmm    asr(s).w Rd, Rm, #imm5  (alu=orr, Rn=pc)
1110 101 0010 s 1111   0000 dddd 0011 mmmm    rrx(s).w Rd, Rm  (ror #0, alu=orr, Rn=pc)
1110 101 0010 s 1111   0iii dddd ii11 mmmm    ror(s).w Rd, Rm, #imm5  (alu=orr, Rn=pc)


Data processing (modified immediate)

1111 0i0 aaaa s nnnn   0iii dddd iiii iiii

1111 0i0 0000 1 nnnn   0iii 1111 iiii iiii    tst.w Rn, #imm  (alu=and, Rd=pc)
1111 0i0 0100 1 nnnn   0iii 1111 iiii iiii    teq.w Rn, #imm  (alu=eor, Rd=pc)
1111 0i0 1000 1 nnnn   0iii 1111 iiii iiii    cmn.w Rn, #imm  (alu=add, Rd=pc)
1111 0i0 1101 1 nnnn   0iii 1111 iiii iiii    cmp.w Rn, #imm  (alu=sub, Rd=pc)

1111 0i0 0010 s 1111   0iii dddd iiii iiii    mov(s).w Rd, #imm  (lsl #0, alu=orr, Rn=pc)


Data processing (register)

1111 101 0000 s nnnn   1111 dddd 0000 mmmm    lsl(s).w Rd, Rn, Rm
1111 101 0001 s nnnn   1111 dddd 0000 mmmm    lsr(s).w Rd, Rn, Rm
1111 101 0010 s nnnn   1111 dddd 0000 mmmm    asr(s).w Rd, Rn, Rm
1111 101 0011 s nnnn   1111 dddd 0000 mmmm    ror(s).w Rd, Rn, Rm

1111 101 0000 0 1111   1111 dddd 10rr mmmm    sxth.w Rd, Rm, rotation
1111 101 0000 0 nnnn   1111 dddd 10rr mmmm    sxtah Rd, Rn, Rm, rotation

1111 101 0000 1 1111   1111 dddd 10rr mmmm    uxth.w Rd, Rm, rotation
1111 101 0000 1 nnnn   1111 dddd 10rr mmmm    uxtah Rd, Rn, Rm, rotation

1111 101 0001 0 1111   1111 dddd 10rr mmmm    sxtb16 Rd, Rm, rotation
1111 101 0001 0 nnnn   1111 dddd 10rr mmmm    sxtab16 Rd, Rn, Rm, rotation

1111 101 0001 1 1111   1111 dddd 10rr mmmm    uxtb16 Rd, Rm, rotation
1111 101 0001 1 nnnn   1111 dddd 10rr mmmm    uxtab16 Rd, Rn, Rm, rotation

1111 101 0010 0 1111   1111 dddd 10rr mmmm    sxtb.w Rd, Rm, rotation
1111 101 0010 0 nnnn   1111 dddd 10rr mmmm    sxtab Rd, Rn, Rm, rotation

1111 101 0010 1 1111   1111 dddd 10rr mmmm    uxtb.w Rd, Rm, rotation
1111 101 0010 1 nnnn   1111 dddd 10rr mmmm    uxtab Rd, Rn, Rm, rotation


Long branch, Long conditional branch, branch and link

cond (cccc) != 1110 and cond != 1111
1111 0Scc ccii iiii   10j0 kiii iiii iiii       bcond (long)
1111 0Sii iiii iiii   10j1 kiii iiii iiii       bra (long)
1111 0Sii iiii iiii   11j1 kiii iiii iiii       bl (long)

Before "Thumb2" was introduced, j and k were always 1.

To calculate dest address:
jj = not(s xor j)
kk = not(s xor k)
bra and bl dest = pc + signext(s:jj:kk:imm10:imm11:0)
bcond      dest = pc + signext(s:k:j:imm6:imm11:0)

bcond dest is _not_ described in v7-m arch manual! See v7-ar manual (DDI0406C)
p334 for details.


Load/store single; also preload data/instr (ldrb/ldrsb encodings with Rt=1111)

        S   ZZL
1111 1000 U 101 1111   tttt iiii iiii iiii      ldr literal (pc-rel)
1111 1000 U 011 1111   tttt iiii iiii iiii      ldrh literal (pc-rel)
1111 1000 U 001 1111   tttt iiii iiii iiii      ldrb literal (pc-rel)

1111 1000 U 001 1111   1111 iiii iiii iiii      pld (pc-rel)
1111 1001 U 001 1111   1111 iiii iiii iiii      pli (pc-rel)

1111 1001 U 001 1111   tttt iiii iiii iiii      ldrsb literal (pc-rel)
1111 1001 U 011 1111   tttt iiii iiii iiii      ldrsh literal (pc-rel)


S = signed:
   0 = zero extend
   1 = sign extend

B = big offset:
   0 = 8 bit
   1 = 12 bit

ZZ = size
   00 = byte
   01 = halfword
   10 = word
   11 = undefine/reserved/unimplemented ???

L = load
   0 = store
   1 = load

For i8 forms:
   p = index
   u = "up" (add offset)
   w = writeback base register

     2222 2222 1111        1100
     7654 3210 9876        1098
        S BZZL
1111 1000 0100 nnnn   tttt 0000 00ii mmmm      str reg
1111 1000 0100 nnnn   tttt 1puw iiii iiii      str i8
1111 1000 0100 1101   tttt 1101 0000 0100      push Rt (single reg)
1111 1000 0100 nnnn   tttt 1110 iiii iiii      strt i8
1111 1000 1100 nnnn   tttt iiii iiii iiii      str i12

( also strb, strh, including t versions, but no s versions)

1111 1000 0101 nnnn   tttt 0000 00ii mmmm      ldr reg
1111 1000 0101 nnnn   tttt 1puw iiii iiii      ldr i8
1111 1000 0101 1101   tttt 1011 0000 0100      pop Rt (single reg)
1111 1000 0101 nnnn   tttt 1110 iiii iiii      ldrt i8
1111 1000 1101 nnnn   tttt iiii iiii iiii      ldr i12

1111 1000 0001 nnnn   tttt 0000 00ii mmmm      ldrb reg
1111 1000 0001 nnnn   tttt 1puw iiii iiii      ldrb i8
1111 1000 0001 nnnn   tttt 1110 iiii iiii      ldrbt i8
1111 1000 1001 nnnn   tttt iiii iiii iiii      ldrb i12

1111 1000 0001 nnnn   1111 0000 00ii mmmm      pld reg
1111 1000 0001 nnnn   1111 1100 iiii iiii      pld i8  ( negative offset)
1111 1000 1001 nnnn   1111 iiii iiii iiii      pld i12

1111 1000 0011 nnnn   tttt 0000 00ii mmmm      ldrh reg
1111 1000 0011 nnnn   tttt 1puw iiii iiii      ldrh i8
1111 1000 0011 nnnn   tttt 1110 iiii iiii      ldrht i8
1111 1000 1011 nnnn   tttt iiii iiii iiii      ldrh i12

1111 1001 0001 nnnn   tttt 0000 00ii mmmm      ldrsb reg
1111 1001 0001 nnnn   tttt 1puw iiii iiii      ldrsb i8
1111 1001 0001 nnnn   tttt 1110 iiii iiii      ldrsbt i8
1111 1001 1001 nnnn   tttt iiii iiii iiii      ldrsb i12

1111 1001 0001 nnnn   1111 0000 00ii mmmm      pli reg
1111 1001 0001 nnnn   1111 1100 iiii iiii      pli i8  ( negative offset)
1111 1001 1001 nnnn   1111 iiii iiii iiii      pli i12

1111 1001 0011 nnnn   tttt 0000 00ii mmmm      ldrsh reg
1111 1001 0011 nnnn   tttt 1puw iiii iiii      ldrsh i8
1111 1001 0011 nnnn   tttt 1110 iiii iiii      ldrsht i8
1111 1001 1011 nnnn   tttt iiii iiii iiii      ldrsh i12
