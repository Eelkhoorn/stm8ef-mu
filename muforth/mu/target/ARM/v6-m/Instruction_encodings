For a similar representation of most of these instructions, see p498 of the
ARMv5 architecture manual (DDI0100).

The old ARMv7TDMI datasheet (DDI0029E - hard to find these days) also has a
nice graphical representation, but lacks some instructions, as the Thumb set
has evolved since then. But see p108 if you're interested in a visual "map" of
the (ARMv4T) instructions.

NOTE: For a group of instructions that differs in just one field, I show the
"template" of the instruction with "y"s showing the field that varies. The
possible values that it can take are broken out directly below the template.


Instructions that, on v6-m, always have a suffix 's':
adc
add Rd_lo, Rn_lo, imm3
add Rdn_lo, imm8
add Rd, Rn, Rm (lo)
and
asr - imm5
asr - reg
bic
eor
lsl
lsr
mov Rd, imm8
mov Rd_lo, Rm_lo  ( really just lsl #0)
mul
mvn
neg (though v6-m manual says we should use rsbs Rd, Rm, #0 instead)
orr
ror
rsb (see neg, above)
sbc
sub Rd_lo, Rn_lo, imm3
sub Rdn_lo, imm8
sub Rd, Rn, Rm (lo)


Instructions that, on v6-m, never have a suffix 's':
add Rd, sp, imm8
add Rd, pc, imm8
add sp, sp, imm7
add (allregs)
cmn Rn, Rm
cmp Rn, imm8
cmp Rn, Rm
mov (allregs)
sub sp, sp, imm7
tst Rn, Rm


000 yy iii ii mmm ddd   shift immed
			00 lsl
			01 lsr
			10 asr

0001 100 mmm nnn ddd   add: Rd = Rn + Rm
0001 101 mmm nnn ddd   sub: Rd = Rn - Rm
0001 110 iii nnn ddd   add imm: Rd = Rn + imm
0001 111 iii nnn ddd   sub imm: Rd = Rn - imm

0010 0 ddd iiii iiii   movi: Rd = i8
0010 1 ddd iiii iiii   cmpi: Rd - i8
0011 0 ddd iiii iiii   addi: Rd = Rd + i8
0011 1 ddd iiii iiii   subi: Rd = Rd - i8

0100 00 yyyy mmm ddd   2op: Rdn = Rdn op Rm
			0000 and
			0001 eor
			0010 lsl  (shift reg)
			0011 lsr  (shift reg)

			0100 asr  (shift reg)
			0101 adc
			0110 sbc
			0111 ror  (shift reg)

			1000 tst  (and, don't change Rdn)
			1001 neg  (Rd = 0 - Rm) ( ARM call this RSB!!)
			1010 cmp
			1011 cmn  ( twos' complement - does an add)

			1100 orr
			1101 mul
			1110 bic
			1111 mvn  (invert)

0100 0100 d m mmm ddd   add:  Rd = Rd + Rm
0100 0101 n m mmm nnn   cmp:  Rn - Rm
0100 0110 d m mmm ddd   mov:  Rd = Rm

0100 0111 0 m mmm 000   bx Rm
0100 0111 1 m mmm 000   blx Rm

0100 1 ttt iiii iiii   ldr Rt, [pc + i8*4]

0101 yyy mmm nnn ttt  ld/st Rt, [Rn, Rm]
			000 str
			001 strh
			010 strb
			011 ldrsb
			100 ldr
			101 ldrh
			110 ldrb
			111 ldrsh

0110 0 iii ii nnn ttt   str Rt, [Rn + i5*4]
0110 1 iii ii nnn ttt   ldr Rt, [Rn + i5*4]

0111 0 iii ii nnn ttt   strb Rt, [Rn + i5]
0111 1 iii ii nnn ttt   ldrb Rt, [Rn + i5]

1000 0 iii ii nnn ttt   strh Rt, [Rn + i5*2]
1000 1 iii ii nnn ttt   ldrh Rt, [Rn + i5*2]

1001 0 ttt iiii iiii   str Rt, [sp + i8*4]
1001 1 ttt iiii iiii   ldr Rt, [sp + i8*4]

1010 0 ddd iiii iiii   add pc: Rd = pc + i8 *4
1010 1 ddd iiii iiii   add sp: Rd = sp + i8 *4

1011 0000 0 iii iiii   add to sp:   sp = sp + i7*4
1011 0000 1 iii iiii   sub from sp: sp = sp - i7*4

1011 00 i 1 iiii i nnn   UNDEFINED (cbz - not in v6m)

1011 0010 yy mmm ddd   sign/zero extend: Rd = op(Rm)
			00 sxth
			01 sxtb
			10 uxth
			11 uxtb

1011 010 p rrrr rrrr   push  (r = regmask; p = lr)

1011 0110 011 d 0010  cpsie/id ( d=1 disable)

1011 0111 ???

1011 10 i 1 iiii i nnn   UNDEFINED (cbnz - not in v6m)

1011 1010 00 mmm ddd   rev Rd, Rm
1011 1010 01 mmm ddd   rev16 Rd, Rm
1011 1010 10 mmm ddd   ???
1011 1010 11 mmm ddd   revsh Rd, Rm

1011 1011 ???

1011 110 p rrrr rrrr   pop   (r = regmask; p = pc)

1011 1110 iiii iiii  bkpt

1011 1111 cccc mmmm  IT (when m != 0; but UNDEF on v6-m)

1011 1111 yyyy 0000  "hint"
			0000 nop
			0001 yield
			0010 wfe
			0011 wfi
			0100 sev

1100 0 nnn rrrr rrrr   stm Rn, <regmask>
1100 1 nnn rrrr rrrr   ldm Rn, <regmask>

1101 yyyy iiii iiii   bcond; i8*2 is signed offset from pc+4
			0000 eq Z=1
			0001 ne Z=0
			0010 cs C=1 (aka hs)
			0011 cc C=0 (aka lo)
			0100 mi N=1
			0101 pl N=0
			0110 vs V=1 (overflow)
			0111 vc V=0
			1000 hi C=1 and Z=0
			1001 ls C=0 or Z=1
			1010 ge N=V
			1011 lt N!=V
			1100 gt N=V and Z=0
			1101 le N!=V or Z=1

1101 1110 iiii iiii   undefined  ( branch "always")
1101 1111 iiii iiii   svc        ( branch "never")

1110 0 iii iiii iiii   branch; i11*2 is signed offset from pc+4

( These last are 32-bit encodings!)
1110 1xxx
1111 0xxx
1111 1xxx
