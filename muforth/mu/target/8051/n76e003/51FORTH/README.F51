Hi

I'm Giovanni, the person referred to in the following files.  Scott
Gehmlich is the author of this Forth interpreter for the 8031
microprocessor.  He was kind enough to send me these files.

I have tried unsuccessfully several times to contact Scott about
making these files available.  He did however, indicate that he was
happy for the files to be distributed as long as he was in no way
liable.  For his precise wording see the file 51FORTH.DOC.

He considers this work to be in the public domain.  Because of the
slightly unusual method of the files becoming available, I'm including
the three letters, (the one below, the documentation file and the code
file) in their entirety.

I, unfortunately, can't claim any credit for this work - I'm just the
messenger :-)

Cheers and good luck - let's get a decent forth for the 8031 family
freely available...

Giovanni Moretti                                G.Moretti@massey.ac.nz
Computer Science Dept                           Ph  +64-6-356-9099
Massey University                               Fax +64-6-350-5611
Palmerston North, New Zealand

All work from this point on is as received from Scott:
-------------------------------------------------------------------------

Date: Thu, 5 Oct 89 17:04:33 MDT
From: scott%idacom%myrias@aunro.AthabascaU.CA
To: GMoretti@MASSEY.AC.NZ
Status: RO


Dear Giovanni,

	I have a FORTH for the 8031. It is a 16 bit FORTH and since it is
an 8-bit micro, at times it seems a bit awkward. 8-bit FORTH is not very
useful because the addressing is 16-bit. It needs only about 20 words to be
written in assembly code with the remainder written in high level FORTH.
It's implementation is as follows:

	Return Stack - I use the 8031 stack for the return stack. It gets
		       initialized to 7H.

	Parameter Stack - I use the remainder of the onboard RAM with R0 as
			  stack pointer. It gets initialized to 7FH and the
			  two stacks grow together. The top-of-stack is
			  actually the data pointer since it is the only
			  16 bit register on board. This also makes the
			  fetch's and store's easier.

The register bank is always set to the lower bank ie. addr 0-7 . The other
registers are used for data manipulation etc. All words are created into
offboard RAM and the FORTH runs out this space.

I use battery-backed RAM to save things and on boot up it copies itself into
static RAM. I can, at any time, save the contents of the RAM to BBRAM. It
presently needs just more than 8K Bytes of RAM.

It is a subroutine-threaded FORTH, it has no inner-interpreter and all the
code is executable.

I have a file on a VAX system which I compile onto an RTX2000 FORTH system
which I then copy into some dual ported RAM. Next I flip the switch and the
8031 runs from this RAM. This is the only way I have to compile the actual
kernel because I haven't built a board with a duart on it yet. Once loaded
into the dual ported RAM the 8031 runs stand-alone.

The higher level words consist of a queueing system that was written by a
fellow Engineer here at IDACOM.

There are some hardware considerations also. If you are still interested,
email me a complete address and I'll send you what I can. If possible I
will also send you a BBRAM with the complete FORTH.

I hope I can be of some help to you.

	Scott Gehmlich			scott@idacom.uucp
	IDACOM Electronics Ltd.
	4211-95 St
	Edmonton, Alberta
	Canada   T6E 5R6
	Phone 403-462-4545
	FAX 403-462-4869

PS. I am presently working on an 8031 ASSMEBLER which runs on my FORTH. This
makes it possible to write readable assembly code within the FORTH words. Since
the FORTH is subroutine threaded ( no inner-interpreter etc ) specific words
can be written in code to run fast.


