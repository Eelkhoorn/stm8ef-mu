-- Flashlight: five flashes and pause of 5 seconds, during night time
-- using built in RTC with LSE crystal and interrupts: auto wake up and alarm.
-- External interrupt to put processor in HALT when not flashing.
-- LED on PC4

-d STM8L051F3

ld target/STM8/STM8L051F3.mu4
ld aliases

flash
__meta

VARIABLE TT		-- start time
VARIABLE TP		-- stop time
here constant BT 7 allot	-- time at boot
-- $5559 , $2000 , $2208 , $21 c,  -- 20:59, 22 aug'21
BT 7 0 fill	-- reset time regs, all 0
here constant ACT  	-- time
$5559 , $1100 , $2208 , $21 c,

__host
meta
-- set time array
: star ( YY MM DD hh mm ss a -- )
	dp preserve  \m goto
	\m c, \m c, \m c, 0 \m c, \m c, \m c, \m c,
;

__meta

: *10us  ( n -- )  --  delay n * 10us
   1- for [
      $A62B ,    --      LD    A,#42
      $4A  c,    -- 1$:  DEC   A
      $26FD ,    --      JRNE  1$
   ] next
;

: fl ( -- ) [ 1 PC_ODR 4 ]B! #5000 *10us [ 0 PC_ODR 4 ]B! ;

: fls ( -- ) 5 0 do fl  #8000 *10us loop ;

-- Unlock RTC control registers
: rtcu ( --)
  [ $ca RTC_WPR ]C!
  [ $53 RTC_WPR ]C!
;

-- Lock RTC control registers
: rtcl ( --)
  [ $FF RTC_WPR ]C!
;


-- initialise RTC
: rtci ( --)
  [ 1 CLK_PCKENR2 2 ]B!		-- rtc periferal clock gating
  [ $10 CLK_CRTCR ]C!			-- LSE
  rtcu
  [ 1 RTC_ISR1 7 ]B!			-- Initialization mode.
  [M RTC_ISR1 6 ]BSU			-- poll INITF
  [ $7F RTC_APRER ]C!			-- set PREDIV_A to 127
  [ 0 RTC_SPRERH ]C!			-- set PREDIV_S to 255
  [ $FF RTC_SPRERL ]C!
--  [ RTC_CR1 #1011 ]C!			-- 
  [ 0 RTC_ISR1 7 ]B!
;

-- Set calender registers to time at a
: sC ( a -- )
	[ 1 RTC_ISR1 7 ]B!		-- $514C
	[M RTC_ISR1 6 ]BSU
	RTC_TR1 7 CMOVE
	[ 0 RTC_ISR1 7 ]B!
;


comment ===

: time
  RTC_TR1 7 0 do 
    DUP C@ SWAP 1+ loop DROP CR
  ROT ."  / " SWAP  ."  / '" 
  CR DROP
  h. ."  : " h. ."  : " h.
;

===

-- set wake up timer to n milliseconds, 1<n<32000
: swu ( n -- )
	[ 0 RTC_CR2 2 ]B!
	[M RTC_ISR1 2 ]BSU			-- poll INITF
	$800 #1000 */ RTC_WUTRH !	-- $5154
;

-- start auto wake up
: stw ( n -- )
	swu
 [ $44 RTC_CR2 ]C!
;

-- save start and stop alrm timings, format: $mmhh
: ss! ( start stop -- )
	TP ! TT !
;

-- set alarm to time in variable @ a
: sa ( a -- )
	[ 0 RTC_CR2 0 ]B!
	[M RTC_ISR1 0 ]BSU			-- poll INITF
	@ RTC_ALRMAR2 !				-- $515D
	[ 1 RTC_ALRMAR1 7 ]B!		-- don't care about seconds
	[ 1 RTC_ALRMAR4 7 ]B!		-- don't care about date
;

-- start alarm
: sta ( a -- )
	sa
	[ $51 RTC_CR2 ]C!	-- enable wake up and alarm interrupts,
;						-- enable alarm timer

: stop
	[ $51 RTC_CR2 ]C!	-- $5149
;

-- : .B base dup @ >R 2 over ! swap 9 .R R> swap ! ;

: sup  ( -- )				-- setup PC4 and PB0
	[ 1 PC_DDR 4 ]B!		-- PC4 LED output
	[ 1 PC_CR1 4 ]B!		-- set up as push pull
	[ 1 PB_CR1 0 ]B!		-- PB0 as input pull up interrupt
	[ 1 PB_CR2 0 ]B!
;

: RTC_int
	SAVEC
	[ RTC_ISR2 2 ]B? if
		fls
	else
		RTC_TR3 C@ TP @  = if		-- $5142, hours register
			 0 TT
		else
			1 TP
		then rtcu sta RTC_CR2 2 B! rtcl  -- $5149
	then
	[ 0 RTC_ISR2 ]C!
	IRET
; -- ' RTC_int INT_RTC !flash	-- $801A

: HALT [ $8E c, ] ;

: EXT10_int	-- toggle between sleep mode and normal mode
	SAVEC
	[ 0 PB_CR2 0 ]B!
	#20000 *10us		-- bounce delay
	BG  @ if
		0
	else
		fl [ ' HALT ] literal 
	then BG !
	[ 1 PB_CR2 0 ]B!
	[ 1 EXTI_SR1 0 ]B!
	IRET
; -- ' EXT10_int INT_EXTI0 !flash	-- $802A, PB0 interrupt

: init
	rtci sup
	#10000 swu					-- 10 sec flash interval
	BT sC						-- Reset clock
-- 	$21 $7 ss!					-- set alarms, start 21:00, stop 07:00
	0 $11 ss!					-- set alarms, start now, stop 11 hours later
	TT sta rtcl					-- set alarm to start, lock RTC control regs
	[ ' HALT ] literal BG !		-- HALT in BG-task, pulse PB0 to toggle HALT
;

-- ' init 'BOOT !flash

comment ===
Set clock: 

init
hex 21 8 19 21 15 30 sC		-- 21:15:30 at 19 august '21
' HALT 'IDLE !				-- use HALT between interrupts to
							--       reduce power consumption

-- Set calender registers, BCD input
: sC ( hh mm ss dd mm yy -- )
	[ 1 RTC_ISR1 7 ]B!		-- $514C
	[M RTC_ISR1 6 ]BSU
	2 for I sD next
	SWAP ROT
	2 for I sT next
	[ 0 RTC_ISR1 7 ]B!
;

: >BCD
	BASE @ #10 = if
		#10 /MOD #16 * +
	then
;

-- SET RTC REG
: SRR ( nIa -- )
	+ SWAP >BCD SWAP C!
;

: sT ( nI-- ) RTC_TR1 SRR ;	-- set time
: sD ( nI-- ) RTC_DR1 SRR ;	-- set date
===
