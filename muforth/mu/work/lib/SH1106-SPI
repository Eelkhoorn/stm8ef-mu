loading SH1106-SPI OLED driver

-- Driver for SH1106 oled display 128x64 over spi
-- (474 bytes, when loaded together with SPI and FONT there is 2207 bytes left.)
-- ( Font NOT in EEPROM @ $4018)

-- ssdi ( --) initialise spi and ssd1306-display
-- cls ( --) clear screen
-- dtxt ( adr --)	display text compiled with $"
-- Text has to be compiled before it can be displayed.
-- : txt $" text to be displayed" ;
-- txt dtxt will display "text to be displayed" on the oled screen.
-- d#	( n --) display number
-- 1234 d#	will display "1234".
-- 60 3 pc	set cursor to dot 60 on 4th line 

-- OLED		-> STM8S
-- DC		-> PD3
-- RES		-> PC7
-- SDA	MOSI	-> PC6
-- SCK		-> PC5
-- CS		-> GND (or (PC4)PD1) if there are more spi peripherals) 

-- OLED		-> STM8L
-- DC		-> PC4
-- RES		-> PB7
-- SDA	MOSI	-> PB6
-- SCK		-> PB5
-- CS		-> GND (or PD0) if there are more spi peripherals) 

ld work/lib/SPI
ld work/lib/FONT

flash

__meta

VARIABLE LBF 4 allotr	-- letter buffer, 6 bytes
CVAR row
CVAR col
CVAR #count
CVAR radixx

: >S SPI DROP ;

.ifndef STM8L

-- send n bytes @ a to display buffer
: sb ( a n -- )
	[ 1 PD_ODR 3 ]B!
	0do1 DUP i1 + C@ >S loop1 DROP
; 

-- send n commands
: scs ( an an-1 .. a0 n -- )
	[ 0 PD_ODR 3 ]B!
	0do1 >S loop1
;

-- send 1 command
: sc ( b --)
	1 scs
;

-- oled active
: +o [ 0 PD_ODR 1 ]B! ;
: -o [ 1 PD_ODR 1 ]B! ;

-- Initialise display
: ssdi  ( --)
	0 SPIon
	[ 1 PD_DDR 3 ]B!	-- set PD3 and PD4 as output PP 
	[ 1 PD_CR1 3 ]B!
	[ 1 PC_DDR 7 ]B!
	[ 1 PC_CR1 7 ]B!
	[ 1 PD_DDR 1 ]B!
	[ 1 PD_CR1 1 ]B!
	+o
	[ 1 PC_ODR 7 ]B! [ 0 PC_ODR 7 ]B!	-- reset sequence
	[ $A62B ,  $4A  c,  $26FD ,  ]		-- delay
	[ 1 PC_ODR 7 ]B!
	$AF sc				-- oled on
;

.else   ( STM8L boards)

-- send n bytes @ a to display buffer
: sb ( a n -- )
	[ 1 PC_ODR 4 ]B!
	0do1 DUP i1 + C@ >S loop1 DROP
; 

-- send n commands
: scs ( an an-1 .. a0 n -- )
	[ 0 PC_ODR 4 ]B!
	0do1 >S loop1
;

-- send 1 command
: sc ( b --)
	1 scs
;

-- oled active
: +o [ 0 PD_ODR 0 ]B! ;
: -o [ 1 PD_ODR 0 ]B! ;

-- Initialise display
: ssdi  ( --)
	[ 1 CLK_PCKENR1 4 ]B!	-- enable SPI peripheral clock
	0 SPIon
	[ 1 PC_DDR 4 ]B!	-- set PB5, PB6, PB7 and PC4 as output PP 
	[ 1 PC_CR1 4 ]B!
	[ $E0 PB_DDR ]litC!
	[ $E0 PB_CR1 ]litC!
	[ 1 PD_DDR 0 ]B!
	[ 1 PD_CR1 0 ]B!
	+o
	[ 1 PB_ODR 7 ]B! [ 0 PB_ODR 7 ]B!	-- reset sequence
	[ $A62B ,  $4A  c,  $26FD ,  ]		-- delay
	[ 1 PB_ODR 7 ]B!
	$AF sc				-- oled on
;

.then

-- Translates ASCII to address of bitpatterns:
: a>bp  ( c -- c-adr ) 
	#32 MAX #127 MIN  #32 - 5 * FONT +
;

-- Translate digit to address of bitpatterns:
: d>bp ( n -- a)
   dup #10 < NOT if
      7 +
   then
   #16 + 5 * FONT +
;

: disp ( a -- )
   LBF 5 CMOVE LBF 6 sb
;

-- position cursor 
: pc  ( column row -- )
	$B0 + SWAP
	6 * 2+			-- first two columns not connected
	$10 /MOD
	$10 +
	3 scs
;

: pc! 2DUP [ row ]C! 2* [ col ]C! pc ;

-- add half columns and jump to next line at end of line
: #row ( n --)
   col +C!
   [ col ]C@ #42 < NOT if
      0 [ row ]C@ 1+ 
      DUP 8 = if DROP 0  then pc!
   then
;

-- space
: spc
	$5600 3 sb 1 #row
;

-- Display character:
: drc  ( c --)
   DUP $20 = if spc DROP else
   a>bp disp 2 #row then
;

-- display digit
: d# ( n -- )
	d>bp disp 2 #row
;

: n#h ( n -- di ... d0)
   [ 0 #count ]lit!
   [ radixx ]@ >R 
   R@ #10 = if DUP 0< if #45 drc NEGATE then then
   begin 1 #count +C! R@ /MOD $FFF AND DUP 0= until R> 2DROP
;

: ##### 4 for #35 drc next ;

: n#
   DUP $8000 = [ radixx ]C@ #10 = AND if 
   DROP #####  ; ] then
   n#h
    [ #count ]C@ 0do1 DUP #10 < if d# else $37 + drc then loop1
;

-- display n characters @ a
: t# ( a n -- )
	0do1 DUP C@ drc  1+ loop1 DROP
;

-- clear page
: cp
	$5600 $82 sb
;

-- clear screen
: cls
	8 for1 0 i1 pc cp next1
	0 0 pc!
;

: str ( a --)
	1+ DUP 1- C@
;

comment ===

If hex values need to be displayed replace n#h and n# :

: n#h ( n -- di ... d0)
   0 count !
   radixx @ >R 
   R@ #10 = if DUP 0< if #45 drc NEGATE then then
   begin 1 count +! R@ /MOD $FFF AND DUP 0= until R> 2DROP
;
: n#
   n#h
   count @ 0 do DUP #10 < if d# else $37 + drc then loop
;

-- draw lines:
-- vertical:
: vln ( b -- )
	8 0 do dup i pc 1 $500f 3 b! $ff >s loop drop
;

-- horizontal:
: hln ( b1 b2 -- )		-- b2: line# (0-7), b1: byte to draw (i.e. 1 or $80)
	0s swap pc 1 $500f 3 b! $80 0 do dup >s loop drop
;
===
