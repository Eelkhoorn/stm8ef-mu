loading work/MINDEV/ADF/ADF+
-- Interface for ADF4351 RF signal generator board with SH1106-SPI OLED display and rotary encoder
-- Encoder connections:
-- 		rotation:		ports C3 and C4
--  		push button:	port D4
-- 		10 nF capacitors to ground

__meta

-- $4018 #475 + constant FONTEND
eeprom

$" >-^Hz outHz resPower " 1 \f + constant TEXT
-- ULOCK TEXT FONTEND #21 CMOVE LOCK

flash


CVAR lvl	-- menu level: 0=change level, 1=change digit, 2=change value
CVAR hc		-- horizontal cursor position, 0 .. 21
CVAR vc		-- vertical cursor position    1, 3 or 5

-- power of 10
: 10^ ( n -- d )
	1 0 ROT DUP if 0do1 #10 D* loop1 else DROP then
;

: mm ( n- n+ n -- n )
	MIN MAX
;

: m! ( a n- n+ n -- n )
	3 PICK FC@ + mm DUP ROT C!
; 

-- display double on oled
: dd# ( a --)
	2@ 9 for1
		i1 10^ D/ SWAP d# 0 D+
-- 		i1 10^ D/ DROP d#
	next1 2DROP
;

-- encoder rotation direction
: +- ( -- 1|-1 )
	[ PC_IDR 4 ]B? if 1 else -1 then
;

-- helper
: h# ( d d -- d )
	+- 1+ if
		D+
	else
		2SWAP D-
	then 
;

-- inc or decr double by rotary encoder
: f#! ( a -- )
	>R #18 [ hc ]C@ - 9 MIN 10^
	R@ 2@
	h#
	R@ 2!
	R> 9 [ vc ]C@ 1- pc! dd#
	Calc
;

-- inc or decr single by rotary encoder
: s#! ( a n- n+ -- )
	+- m!
	9 [ vc ]C@ 1- pc! d#
;

: p! ( -- )
	[ hc ]C@ [ vc ]C@
	[ lvl ]C@ 0= if 1- then
	pc! 
;

-- display cursor, menu level dependant
: cr# ( -- )
	p! TEXT [ lvl ]C@ + 1 t#
;
: clr
	p! spc spc
; 

-- horizontal displacement of cursor
: ho 
	clr 8 #18
	[ hc ]C@ +- + mm [ hc ]C! cr#
;

-- vertical displacement of cursor
: ve
	clr
	1 5 [ vc ]C@ +- 2* + mm [ vc ]C! cr# 
;

-- push button interrupt, port D4
: PD4-int
	SAVEC
	[ 0 PD_CR2 4 ]B!				-- disable trigger
	[ $7209 , PD_IDR , $FB c, ]		-- wait for PD1 to go high
	clr
	[ lvl ]C@ 0= if
		[ 9 hc ]litC! [ lvl ]INC
		[ vc ]C@ 5 = if
			[ lvl ]INC
		then
	else 
		[ hc ]C@ 8 = if
			[ lvl ]CLR  
		else
			[ lvl ]C@ 1 = if
				[ lvl ]INC
			else
				[ lvl ]DEC
				[ vc ]C@ 5 = if
					[ lvl ]CLR
					[ 8 hc ]litC!
				then
			then
		then
	then  cr# 
	[ 1 PD_CR2 4 ]B!		-- enable trigger
	IRET
;
--  ' PD4-int  INT_EXTI3 !flash

-- rotation interrupt, port C3
: PC3-int
	SAVEC
	[ 0 PC_CR2 3 ]B!				-- disable trigger
	[ $7207 , PC_IDR , $FB c, ]		-- wait for PC3 to go high
	[ lvl ]C@  0= if
		 ve
	else [ lvl ]C@
	1 = if
		ho
	else
		[ vc ]C@ 
		1 = if
			Fro f#!
		else [ vc ]C@ 
		3 = if
			Res f#!
		else
			Pow 0 4 s#!
		then then ud
	then then
	[ 1 PC_CR2 3 ]B!	-- enable trigger
	IRET
;
-- ' PC3-int INT_EXTI2 !flash


-- helper
: hs ( hc vc -- hc vc )
	2DUP pc! ;

-- start screen
: scr
	3 0do1 0 i1 2* pc! [ TEXT 3 + ] literal i1 6 * + 6 t# loop1
	9 0 hs Fro dd#
	2+ hs Res dd#
	2+ pc! [ Pow ]C@ d#
;

: init
	init0
	ssdi
	[ 1 PC_CR1 3 ]B! [ 1 PC_CR2 3 ]B!	-- PC3 input interrupt
	[ 1 PC_CR1 4 ]B!					-- PC4 input
	[ 1 PD_CR1 4 ]B! [ 1 PD_CR2 4 ]B!	-- PD4 input interrupt
	$FA00  $34BC Fro 2!		-- 884.8 MHz
	$AF08 $2F Fpfd 2!		-- 25MHz/8
	#1000 0 Res 2!			-- 1 kHz
-- 	[ 3 Pow ]litC!
	cls
	scr
	Calc
	[ 8  hc ]litC! [ 1 vc ]litC! p! cr#
	[ #10 radixx ]lit!
;

-- progam the interrupt and boot vectors:
' PC3-int INT_EXTI2 image-!
' PD4-int INT_EXTI3 image-!
' init 'BOOT image-!

ram

__host

-- flash interrupt verctors
: fl-int
   \t PD4-int  \m INT_EXTI3 !flash
   \t PC3-int  \m INT_EXTI2 !flash
   \t init      \m 'BOOT     !flash
;

cr ." Don't forget to program the EEPROM: fle" cr
